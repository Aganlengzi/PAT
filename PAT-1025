/*#1025
//没有做出来
#include <stdlib.h>
#include <iostream>

using namespace std;

int main()
{
    int first,n,k,temp,i,j,l;
    int data[100005];
    int next[100005];
    int list[100005];
    int final[100005];
    scanf("%d %d %d", &first, &n, &k);
    for(i=0; i<n; i++)
    {
        scanf("%d", &temp);
        scanf("%d %d",&data[temp],&next[temp]);
    }
    l=0;
    while(first!=-1)//整理链表，只剩下需要的节点
    {
        list[l] = first;
        l++;
        first = next[first];
    }
    for(i=0;i<l;i++)
    {
        final[i] = list[i];
    }
    for(i=0;i<(l-l%k);i++)//只要对每k个数进行处理就可以了
    {
        final[i] = list[(i/k)*k+k-i%k-1];
    }
    for(i=0;i<l-1;i++)
    {
        printf("%05d %d %05d\n",final[i],data[final[i]],final[i+1]);
    }
    printf("%05d %d %d\n",final[l-1],data[final[l-1]],-1);
    system("pause");
    return 0;
}
*/
/*
#include <iostream>
#include <string>
#include <vector>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <cmath>
#include <deque>

using namespace std;

//#1025
//此题未过
//没有想到
//1）给出的节点中有不在链表上的
//2）没有想到直接只用地址，也就是下标写出整理后的链表与结果之间的下标的关系，从而直接得出答案
//3）后面的代码很值得记忆，思路
int main()
{
    int first_addr, N, K;
    int Data[100005] = {0};
    int Next[100005] = {0};
    int Before[100005] = {0};
    scanf("%d %d %d", &first_addr, &N, &K);

    for(int i = 0; i < N; i++)
    {
        int addr, data, next_addr;
        scanf("%d %d %d", &addr, &data, &next_addr);
        Data[addr] = data;
        Next[addr] = next_addr;
    }

    int next_addr = first_addr;
    int before_addr = -1;
    int valid_node = 0;
    while(next_addr != -1)
    {
        valid_node++;
        Before[next_addr] = before_addr;
        before_addr = next_addr;
        next_addr = Next[next_addr];
    }
    if(valid_node ==0)
        return 0;

    before_addr = first_addr;
    next_addr = first_addr;//Next[first_addr];
    int jishu = 1;
    while(next_addr != -1)//next_addr != -1 &&
    {
        if(jishu%K == 0)
        {
            before_addr = next_addr;
            for(int j = 0; j < K -1; j++)
            {
                printf("%05d %d %05d\n",before_addr,Data[before_addr],Before[before_addr]);
                before_addr = Before[before_addr];
            }
            if(Next[next_addr] == -1)
                printf("%05d %d -1\n",before_addr,Data[before_addr]);
            else
                printf("%05d %d %05d\n",before_addr,Data[before_addr],Next[next_addr]);
        }
        else if(jishu > valid_node/K * K && jishu <= valid_node)
        {
            if(Next[next_addr] == -1)
                printf("%05d %d -1\n",next_addr,Data[next_addr]);
            else
                printf("%05d %d %05d\n",next_addr,Data[next_addr],Next[next_addr]);
        }
        next_addr = Next[next_addr];
        jishu++;
    }
}
*/
