//PAT-1003
#include <iostream>
#include <string>
#include <vector>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <cmath>
#include <deque>

using namespace std;

#1003
//仔细审题，分析题意并抽象出其中的本质，构思好以后开始coding
//一开始没有通过原因是输入问题，关于输入的换行符在缓冲区中是否保留的问题，后面的输入最好采用C的scanf和printf
//scanf在输入的时候会将换行符等从缓冲区中读出并舍弃
//然后是输出问题：在之前已经判断并输出YES和NO之后后面依然进行判断，导致两次输出一行的判断结果

int main()
{
    int total;
    scanf("%d",&total);
    for(int total_i = 0; total_i < total; total_i++)
    {
        char line[105] = {0};
        scanf("%s", line);

        int Pnum = 0, Tnum = 0;
        int Pindex = 0, Tindex = 0;
        for(int i = 0; i < strlen(line); i++)
        {
            if(line[i] != 'P' && line[i] != 'A' && line[i] != 'T')
            {
                cout<<"NO\n";
                goto next;
            }
            if(line[i] == 'P')
            {
                Pindex = i;
                Pnum++;
                if(Pnum > 1)
                {
                    cout<<"NO\n";
                    goto next;
                }
            }
            if(line[i] == 'T')
            {
                Tindex = i;
                Tnum++;
                if(Tnum > 1)
                {
                    cout<<"NO\n";
                    goto next;
                }
            }
        }
        //上面这一大段需要自己实现，实际上如果使用c++中的string中的成员函数进行处理，会十分方便和高效
        //后面对这段进行改写
        //string line_str(line);
        //Pindex = line_str.find('P',0);
        //Tindex = line_str.find('T',0);
        //就本题目而言，上面的做法是比较好的，因为只需要遍历一次就可以得到所有的信息，并且能够将一些错误的情况排除
        //用c++的string反而不是太好做
        //这里用到goto语句，所幸只是用来控制循环的跳转所以在理解和逻辑上不存在太大的问题
        if(Tindex - Pindex > 2)
        {
            if(strlen(line)-(Tindex-Pindex-1)*Pindex -1 == Tindex)
                cout<<"YES\n";
            else
                cout<<"NO\n";
        }
        if(Tindex - Pindex == 2)
        {
            if(strlen(line) - Pindex - 1 == Tindex)
                cout<<"YES\n";
            else
                cout<<"NO\n";
        }
        if(Tindex - Pindex < 2)
        {
            cout<<"NO\n";
        }
next:
        ;
    }
}
/**********************************************************************************************************/
//在网上找到的利用c++string成员函数来解的写法，感觉思路清晰。
//实际想法是一致的，但是怎么就觉得人家的思路那么清晰，而且代码这么漂亮。。。。
#include<cstdio>
#include<string>
using namespace std;
void check()
{
    char ch[105];
    int idxT,idxP,len;
    scanf("%s",ch);
    string s=string(ch);
    
    len=s.length();
    idxP=s.find('P',0);
    idxT=s.find('T',0);
    if(idxP==string::npos||idxT==string::npos||(idxP>=idxT-1))
    {
        printf("NO\n");//没有找到或者找到了但是二者的位置不对
    }
    else
    {
        string a(s,0,idxP);                 //a
        string b(s,idxP+1,idxT-idxP-1);     //b
        string c(s,idxT+1,len-idxT-1);      //c
        string ans=a+b+c;
        if(ans.find_first_not_of('A')!=string::npos)
        {
            printf("NO\n");//得到的字符串中应该全部都是A
        }
        else
        {
            if(idxP==0&&len-idxT-1==0)
                printf("YES\n");
            else if(idxP*(idxT-idxP-1)==len-idxT-1)
                printf("YES\n");
            else
                printf("NO\n");
        }
    }
    return;
}
int main()
{
    int n;
    scanf("%d",&n);
    for(;n--;)
    {
        check();
    }
    return 0;
}
